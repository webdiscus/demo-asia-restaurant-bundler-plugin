(()=>{"use strict";const e=e=>{const t=document.querySelectorAll(".dot"),s=document.querySelectorAll(".slide");t.forEach((e=>e.classList.remove("active"))),s.forEach((e=>{e.style.display="none"})),s[e-1].style.display="block",t[e-1].classList.add("active")},t=()=>{const t=document.querySelectorAll(".dot"),s=document.querySelectorAll(".slide");for(let o=0;o<s.length;o+=1){if("block"===s[o].style.display&&s[o+1]){s[o].style.display="none",t[o].classList.remove("active"),s[o+1].style.display="block",t[o+1].classList.add("active");break}o===s.length-1&&(s[o].style.display="none",t[o].classList.remove("active"),e(1))}},s=s=>{const o=document.querySelectorAll(".dot"),l=document.querySelectorAll(".slide");if(1===s)t();else if(-1===s)for(let t=0;t<l.length;t+=1){if("block"===l[t].style.display&&l[t-1]){l[t].style.display="none",o[t].classList.remove("active"),l[t-1].style.display="block",o[t-1].classList.add("active");break}if("block"===l[t].style.display&&0===t){l[0].style.display="none",o[0].classList.remove("active"),e(l.length);break}}},o=(e,t,s,o,l)=>{const c=new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&document.querySelectorAll(s).forEach((e=>{e.classList.replace(o,l)}))}))}),{threshold:t});document.querySelectorAll(e).forEach((e=>c.observe(e)))};new Set,window.addEventListener("DOMContentLoaded",(()=>{(()=>{const e=document.querySelectorAll(".left-content a"),t=document.querySelector(".content");for(let s=0;s<e.length;s+=1)e[s].id===t.classList[1]&&e[s].classList.replace("nav-inactive","nav-active")})(),e(1),setInterval(t,7e3),[".intro-owners",".intro-staff"].forEach((e=>{o(e,.3,e,"hidden","show")})),[".intro-chefs .header",".intro-chefs .desc"].forEach((e=>{o(e,.3,e,"fadeOut","fadeIn")})),[".chef-1 .image"].forEach((e=>{o(e,.5,e,"fadeFromLeft","fadeToRight")})),[".chef-2 .image"].forEach((e=>{o(e,.5,e,"fadeFromRight","fadeToLeft")}))})),window.onscroll=()=>{const e=document.querySelector(".sticky-navbar");document.body.scrollTop>25||document.documentElement.scrollTop>25?e.style.top="0":e.style.top="-180px"},document.body.addEventListener("click",(t=>{const o=document.querySelector(".sidebar.menu");(t.target.matches(".sidebar.symbol")||t.target.matches(".menu-icon")||t.target.matches(".menu-text"))&&(o.style.transform="translate3d(0, 0, 0)"),t.target.matches(".closeBtn")&&(o.style.transform="translate3d(-450px, 0, 0)"),t.target.matches(".prev")&&s(-1),t.target.matches(".next")&&s(1),t.target.matches(".dot")&&(t=>{const s=document.querySelectorAll(".dot");s.forEach((e=>e.classList.remove("selected"))),t.classList.add("selected");const o=Array.from(s).findIndex((e=>e.classList.contains("selected")))+1;e(o)})(t.target)}));const l=document.querySelector("#pre-loader");window.onload=()=>{l.style.display="none"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVVLLElBQUksWUFDckIsTUFBTUssRUFBUW9DLE1BQU1DLEtBQUtyRCxHQUFNc0QsV0FBV0MsR0FBTUEsRUFBRWpELFVBQVVrRCxTQUFTLGNBQWUsRUFDcEYxRCxFQUFja0IsRUFBTSxFQzVCaEJ5QyxDQUFRVCxFQUFFakQsT0FDZCxJQUdKLE1BQU0yRCxFQUFVekQsU0FBU29DLGNBQWMsZUFDdkNKLE9BQU8wQixPQUFTLEtBQ1pELEVBQVFqRCxNQUFNQyxRQUFVLE1BQU0sQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS12Mi8uL3NyYy9zY3JpcHRzL3RlbXBsYXRlLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS12Mi8uL3NyYy9zY3JpcHRzL293bmVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmNvbnN0IGNyZWF0ZVBhZ2UgPSAoaHRtbCkgPT4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoaHRtbCk7XG5cbi8qIFNsaWRlc2hvdyAqL1xuXG5jb25zdCBjYXJvdXNlbFN0YXJ0ID0gKHRhcmdldCkgPT4ge1xuICAgIGNvbnN0IGRvdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90Jyk7XG4gICAgY29uc3Qgc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJyk7XG4gICAgZG90cy5mb3JFYWNoKChkb3QpID0+IGRvdC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKSk7XG4gICAgc2xpZGVzLmZvckVhY2goKHNsaWRlKSA9PiB7IHNsaWRlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIiB9KTtcbiAgICBzbGlkZXNbdGFyZ2V0IC0gMV0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgZG90c1t0YXJnZXQgLSAxXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbn1cblxuY29uc3QgY2Fyb3VzZWxBdXRvUnVuID0gKCkgPT4ge1xuICAgIGNvbnN0IGRvdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90Jyk7XG4gICAgY29uc3Qgc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldLnN0eWxlLmRpc3BsYXkgPT09IFwiYmxvY2tcIiAmJiAoc2xpZGVzW2kgKyAxXSkpIHtcbiAgICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBkb3RzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgc2xpZGVzW2kgKyAxXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgZG90c1tpICsgMV0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGRvdHNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICBjYXJvdXNlbFN0YXJ0KDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmNvbnN0IG1vdmVTbGlkZSA9IChpbmRleCkgPT4ge1xuICAgIGNvbnN0IGRvdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90Jyk7XG4gICAgY29uc3Qgc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJyk7XG4gICAgaWYgKGluZGV4ID09PSAxKSB7XG5cbiAgICAgICAgY2Fyb3VzZWxBdXRvUnVuKCk7XG4gICAgfSBlbHNlIGlmIChpbmRleCA9PT0gLTEpIHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlc1tpXS5zdHlsZS5kaXNwbGF5ID09PSBcImJsb2NrXCIgJiYgKHNsaWRlc1tpIC0gMV0pKSB7XG5cbiAgICAgICAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIGRvdHNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgc2xpZGVzW2kgLSAxXS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgIGRvdHNbaSAtIDFdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNsaWRlc1tpXS5zdHlsZS5kaXNwbGF5ID09PSBcImJsb2NrXCIgJiYgaSA9PT0gMCkgey8qIGlmIG9ubHkgaSA9PT0gMCBpcyB0aGUgY29uZGl0aW9uLCB0aGUgbG9vcCBicmVha3MgcmlnaHRhd2F5IGF0IHRoZSBzdGFydCAtIHJlc3VsdGluZyBpbiBkdXBsaWNhdGUgb3IgcHJvYmxlbWF0aWMgZmxvdyAqL1xuXG4gICAgICAgICAgICAgICAgc2xpZGVzWzBdLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICBkb3RzWzBdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGNhcm91c2VsU3RhcnQoc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGRvdE1vdmUgPSAodGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgZG90cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QnKTtcbiAgICBkb3RzLmZvckVhY2goKGRvdCkgPT4gZG90LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJykpO1xuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgIGNvbnN0IGluZGV4ID0gQXJyYXkuZnJvbShkb3RzKS5maW5kSW5kZXgoKGEpID0+IGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSArIDE7XG4gICAgY2Fyb3VzZWxTdGFydChpbmRleCk7XG59XG5cbi8qIFNlY3Rpb24gc3R5bGUgZGl2aWRlciAqL1xuXG5jb25zdCBpbnRlcnNlY3Rpb25PYnNlcnZlID0gKGdyb3VwQ2xhc3MsIHRIb2xkLCBjdXJBdHQsIGludGVyQXR0KSA9PiB7XG4gICAgY29uc3Qgb2JzZXJ2ZXJPcHRpb25zID0ge1xuICAgICAgICByb290OiBudWxsLCAvKiBTZWxlY3QgdGhlIGFyZWEgdGhhdCB0aGUgb2JzZXJ2ZXIgaXMgYXBwbGllZCB0bywgbnVsbCA9IGRlZmF1bHQgdG8gYnJvd3NlciB2aWV3cG9ydCAqL1xuICAgICAgICByb290TWFyZ2luOiAnMHB4JywgLyogTWFyZ2luIGFyb3VuZCB0aGUgcm9vdCAqL1xuICAgICAgICB0aHJlc2hvbGQ6IHRIb2xkIC8qIEV4Y3V0ZSBjYWxsYmFjayBhdCA1MCUgb2YgdGFyZ2V0IHZpc2liaWxpdHkuIElmIHlvdSB3YW50IHRoZSBjYWxsYmFjayB0byBydW4gZXZlcnkgdGltZSB2aXNpYmlsaXR5IHBhc3NlcyBhbm90aGVyIDI1JSwgeW91IHdvdWxkIHNwZWNpZnkgdGhlIGFycmF5IFswLCAwLjI1LCAwLjUsIDAuNzUsIDFdIC0gTWF5YmUgZ29vZCBmb3IgZHluYW1pYyBjb2xvciBjaGFuZ2luZyBvZiBiYWNrZ3JvdW5kICovXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2JzZXJ2ZXJDYWxsYmFjayhlbnRyaWVzLCBvYnNlcnZlcikge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7LyogTWFueSBvcHRpb25zLiBFLmcuIGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gcHJldlJhdGlvIG1lYW5zIHRoYXQgZm9yIGVhY2ggc2VjdGlvbiBvZiBlbnRyaWVzLCB3ZSBsb29rIHRvIHNlZSBpZiB0aGUgcmF0aW8gaXMgZ29pbmcgdXAgKHByZXZSYXRpbyA9IGVudHJ5LmludGVyc2VjdGlvblJhdGlvOyBtZWFuaW5nIGdyYWR1YWxseSBjaGVja2luZyB0aGUgcG9zaXRpb24gLSBzY3JvbGwgdXAgb3Igc2Nyb2xsIGRvd24pICovXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbShlbnRyeS50YXJnZXQuY2hpbGRyZW4pLmZvckVhY2goKGNoaWxkKSA9PiBjaGlsZC5jbGFzc0xpc3QucmVwbGFjZShjdXJBdHQsIGludGVyQXR0KSlcbiAgICAgICAgICAgICAgICAvKiBmYWRlIGluIGVsZW1zIHRoYXQgYXJlIGluIHZpZXcgKi9cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVudHJ5LnRhcmdldC5jaGlsZHJlbikuZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLmNsYXNzTGlzdC5yZXBsYWNlKGludGVyQXR0LCBjdXJBdHQpKVxuICAgICAgICAgICAgICAgIC8qIGZhZGUgb3V0IGVsZW1zIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB2aWV3ICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihvYnNlcnZlckNhbGxiYWNrLCBvYnNlcnZlck9wdGlvbnMpO1xuICAgIGNvbnN0IHRhcmdldEdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChncm91cENsYXNzKTtcbiAgICB0YXJnZXRHcm91cC5mb3JFYWNoKHRhcmdldCA9PiBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCkpO1xufVxuXG5jb25zdCBiYWNrZ3JvdW5kQ2hhbmdlciA9IChncm91cENsYXNzLCB0aG9sZCwgdGFyZ2V0RWwpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9IChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgLyogZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBlbnRyeS50YXJnZXQuZGF0YXNldC5jb2xvcjsgKi9cbiAgICAgICAgICAgICAgICAvKiB0YXJnZXRFbC5zdHlsZS5iYWNrZ3JvdW5kID0gdGFyZ2V0Q3NzO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsLnN0eWxlLmJhY2tncm91bmRSZXBlYXQgPSBcIm5vLXJlcGVhdFwiO1xuICAgICAgICAgICAgICAgIHRhcmdldEVsLnN0eWxlLmJhY2tncm91bmRTaXplID0gXCJjb3ZlclwiOyAqL1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0RWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbFswXSkuc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldEVsWzFdKS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWxbMl0pLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoY2FsbGJhY2ssIHsgdGhyZXNob2xkOiB0aG9sZCB9KTtcbiAgICBjb25zdCB0YXJnZXRHcm91cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZ3JvdXBDbGFzcyk7XG4gICAgdGFyZ2V0R3JvdXAuZm9yRWFjaCh0YXJnZXQgPT4gb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQpKVxufVxuXG5jb25zdCB1bml2ZXJzYWxPYnNlcnZlciA9IChncm91cENsYXNzLCB0aG9sZCwgdGFyZ2V0RWxDbGFzcywgY3VyckF0dCwgbmV3QXR0KSA9PiB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEVsQWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRFbENsYXNzKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRFbEFsbC5mb3JFYWNoKCh0YXJnZXRFbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbC5jbGFzc0xpc3QucmVwbGFjZShjdXJyQXR0LCBuZXdBdHQpXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywgeyB0aHJlc2hvbGQ6IHRob2xkIH0pO1xuICAgIGNvbnN0IHRhcmdldEdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChncm91cENsYXNzKTtcbiAgICB0YXJnZXRHcm91cC5mb3JFYWNoKHRhcmdldCA9PiBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCkpXG59XG5cbi8qIGNvbnN0IHNwZWNpZmljT2JzZXJ2ZXIgPSAoZ3JvdXBDbGFzcywgdGhvbGQsIHRhcmdldEVsLCBjdXJyQXR0LCBuZXdBdHQpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9IChlbnRyaWVzLCBvYnNlcnZlcikgPT4ge1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGFyZ2V0RWwpXG4gICAgICAgICAgICAgICAgdGFyZ2V0RWwuc2V0UHJvcGVydHkoJ29wYWNpdHknLCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywgeyB0aHJlc2hvbGQ6IHRob2xkIH0pO1xuICAgIGNvbnN0IHRhcmdldEdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChncm91cENsYXNzKTtcbiAgICB0YXJnZXRHcm91cC5mb3JFYWNoKHRhcmdldCA9PiBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCkpXG59ICovXG5cbi8qIEdhbGxlcnkgaW50ZXJ2YWwgKi9cblxuY29uc3QgaW50ZXJ2YWwgPSB7XG4gICAgaW50ZXJ2YWxzOiBuZXcgU2V0KCksXG5cbiAgICBtYWtlSW50ZXJ2YWwoLi4uYXJncykge1xuICAgICAgICBjb25zdCBuZXdJbnRlcnZhbCA9IHNldEludGVydmFsKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmludGVydmFscy5hZGQobmV3SW50ZXJ2YWwpO1xuICAgICAgICByZXR1cm4gbmV3SW50ZXJ2YWw7XG4gICAgfSxcblxuICAgIG1ha2VUaW1lb3V0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgbmV3VGltZW91dCA9IHNldFRpbWVvdXQoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxzLmFkZChuZXdUaW1lb3V0KTtcbiAgICAgICAgcmV0dXJuIG5ld1RpbWVvdXQ7XG4gICAgfSxcblxuICAgIGNsZWFyKGlkKSB7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxzLmRlbGV0ZShpZCk7XG4gICAgICAgIHJldHVybiBjbGVhckludGVydmFsKGlkKTtcbiAgICB9LFxuXG4gICAgY2xlYXJBbGwoKSB7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxzLmNsZWFyKCk7XG4gICAgfVxufVxuXG5jb25zdCBzaHVmZmxlSW1hZ2UgPSAoaW1hZ2VDbGFzcykgPT4ge1xuICAgIGNvbnN0IGltYWdlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChpbWFnZUNsYXNzKSk7XG4gICAgY29uc3QgaW1nQXJyYXkgPSBbXTtcblxuICAgIGludGVydmFsLmludGVydmFscy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoWy4uLmludGVydmFsLmludGVydmFsc10uaW5kZXhPZih2YWx1ZSkgPj0gMikge1xuICAgICAgICAgICAgaW50ZXJ2YWwuaW50ZXJ2YWxzLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBpbWFnZXMuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICAgICAgaWYgKGltYWdlLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGUtYWN0aXZlJykpIHtcbiAgICAgICAgICAgIGltZ0FycmF5LnNwbGljZSgwLCBpbWdBcnJheS5sZW5ndGgpO1xuICAgICAgICAgICAgaW1nQXJyYXkucHVzaChpbWFnZSk7XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgcHJldlNsaWRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW1nQXJyYXlbMF0uaWQpO1xuICAgIGxldCBjdXJTbGlkZTtcbiAgICBsZXQgbmV4dFNsaWRlO1xuXG4gICAgY29uc3Qgc2V0U2xpZGVTdHlsZXMgPSAoKSA9PiB7XG4gICAgICAgIGN1clNsaWRlLnN0eWxlLnpJbmRleCA9ICcxMCc7XG4gICAgICAgIGN1clNsaWRlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBuZXh0U2xpZGUuc3R5bGUuekluZGV4ID0gJzknO1xuICAgICAgICBuZXh0U2xpZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICAgIGNvbnN0IHNldFByZXZTbGlkZSA9ICgpID0+IHtcbiAgICAgICAgcHJldlNsaWRlLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmICgoTnVtYmVyKGltZ0FycmF5WzBdLmlkKSA8IGltYWdlcy5sZW5ndGggLSAxKSkge1xuICAgICAgICBjdXJTbGlkZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKChOdW1iZXIoaW1nQXJyYXlbMF0uaWQpICsgMSkudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgaWYgKE51bWJlcihjdXJTbGlkZS5pZCkgPCBpbWFnZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoTnVtYmVyKGN1clNsaWRlLmlkKSArIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKE51bWJlcihjdXJTbGlkZS5pZCkgPj0gaW1hZ2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgY3VyU2xpZGUuY2xhc3NMaXN0LmFkZCgnc2xpZGUtYWN0aXZlJyk7XG5cbiAgICAgICAgaW50ZXJ2YWwubWFrZVRpbWVvdXQoc2V0U2xpZGVTdHlsZXMsIDUwMDApO1xuXG5cbiAgICB9IGVsc2UgaWYgKChOdW1iZXIoaW1nQXJyYXlbMF0uaWQpID49IGltYWdlcy5sZW5ndGggLSAxKSkge1xuICAgICAgICBjdXJTbGlkZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcwJyk7XG5cblxuICAgICAgICBpZiAoTnVtYmVyKGN1clNsaWRlLmlkKSA8IGltYWdlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChOdW1iZXIoY3VyU2xpZGUuaWQpICsgMSk7XG4gICAgICAgICAgICBuZXh0U2xpZGUuc3R5bGUuekluZGV4ID0gJzknO1xuICAgICAgICB9IGVsc2UgaWYgKE51bWJlcihjdXJTbGlkZS5pZCkgPj0gaW1hZ2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcwJyk7XG4gICAgICAgICAgICBuZXh0U2xpZGUuc3R5bGUuekluZGV4ID0gJzknO1xuICAgICAgICB9XG4gICAgICAgIGN1clNsaWRlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWFjdGl2ZScpO1xuXG4gICAgICAgIGludGVydmFsLm1ha2VUaW1lb3V0KHNldFNsaWRlU3R5bGVzLCA1MDAwKTtcbiAgICB9XG5cbiAgICBpbnRlcnZhbC5tYWtlVGltZW91dChzZXRQcmV2U2xpZGUsIDUwMDApO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGltYWdlc1tpXSAhPT0gY3VyU2xpZGUgJiYgaW1hZ2VzW2ldICE9PSBuZXh0U2xpZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNldEltYWdlc1N0eWxlcyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpbWFnZXNbaV0uc3R5bGUuekluZGV4ID0gJzgnO1xuICAgICAgICAgICAgICAgIGltYWdlc1tpXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW50ZXJ2YWwubWFrZVRpbWVvdXQoc2V0SW1hZ2VzU3R5bGVzLCA1MDAwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbi8qIE5hdiBzdHlsZXMgKi9cblxuY29uc3QgY2xpY2tPcGVuID0gKHRhcmdldCkgPT4ge1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKDAsIDAsIDApXCI7XG59XG5jb25zdCBjbGlja0Nsb3NlID0gKHRhcmdldCkgPT4ge1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKC00NTBweCwgMCwgMClcIjtcbn1cblxuY29uc3QgbmF2U2Nyb2xsID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0aWNreSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGlja3ktbmF2YmFyJylcbiAgICBpZiAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPiAyNSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID4gMjUpIHtcbiAgICAgICAgLyogc2Nyb2xsIDIwcHggZnJvbSB0b3Agb2YgdGhlIGVsZW1lbnQgKGJvZHkgb3IgUk9PVCkgLSBjaGFuZ2UgdGhpcyBpbnRvIG9yaWdpbmFsIG5hdiBiYXIgaGVpZ2h0ICovXG4gICAgICAgIHN0aWNreS5zdHlsZS50b3AgPSAnMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RpY2t5LnN0eWxlLnRvcCA9ICctMTgwcHgnO1xuICAgIH1cbn1cblxuY29uc3QgdGFiTmF2U3R5bGUgPSAoKSA9PiB7XG4gICAgY29uc3QgY3VycmVudE5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sZWZ0LWNvbnRlbnQgYScpO1xuICAgIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnROYXYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGN1cnJlbnROYXZbaV0uaWQgPT09IGN1cnJlbnRDb250ZW50LmNsYXNzTGlzdFsxXSkge1xuICAgICAgICAgICAgY3VycmVudE5hdltpXS5jbGFzc0xpc3QucmVwbGFjZSgnbmF2LWluYWN0aXZlJywgJ25hdi1hY3RpdmUnKVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cblxuLy8hIFVudXNlZFxuXG4vKiBjb25zdCBzcGxpY2VPYmplY3QgPSAob2JqLCBudW0xLCBudW0yKSA9PiB7XG4gICAgY29uc3QgbmV3T2JqID0ge307XG4gICAgaWYgKCFudW0yKSB7XG4gICAgICAgIG51bTIgPSAxO1xuICAgIH1cbiAgICBvYmouZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBbLi4ub2JqXS5pbmRleE9mKHZhbHVlKVxuICAgICAgICBjb25zb2xlLmxvZyhpbmRleClcbiAgICAgICAgaWYgKGluZGV4IDwgbnVtMSB8fCBpbmRleCA+PSBudW0xICsgbnVtMikge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihuZXdPYmosIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0pXG4gICAgY29uc29sZS5sb2cobmV3T2JqKVxuICAgIHJldHVybiBuZXdPYmo7XG59XG5cblxuY29uc3Qgc3dpdGNoVGFiID0gKHRhcmdldCwgbmV3Q29udGVudCkgPT4ge1xuICAgIGNvbnN0IGN1ckNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpO1xuICAgIGNvbnN0IGh0bWxOZXdDb250ZW50ID0gbmV3Q29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgaWYgKCFjdXJDb250ZW50LmNsYXNzTGlzdC5jb250YWlucyhgJHt0YXJnZXQuaWR9YCkpIHtcbiAgICAgICAgY3VyQ29udGVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChodG1sTmV3Q29udGVudCwgY3VyQ29udGVudCk7XG4gICAgfVxufSAqL1xuXG5leHBvcnQgeyBjcmVhdGVQYWdlLCBjbGlja09wZW4sIGNsaWNrQ2xvc2UsIGNhcm91c2VsU3RhcnQsIGNhcm91c2VsQXV0b1J1biwgbW92ZVNsaWRlLCBkb3RNb3ZlLCBpbnRlcnNlY3Rpb25PYnNlcnZlLCBuYXZTY3JvbGwsIHNodWZmbGVJbWFnZSwgaW50ZXJ2YWwsIGJhY2tncm91bmRDaGFuZ2VyLCB1bml2ZXJzYWxPYnNlcnZlciwgdGFiTmF2U3R5bGUgfTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgY2xpY2tPcGVuLCBjbGlja0Nsb3NlLCBuYXZTY3JvbGwsIGNhcm91c2VsU3RhcnQsIGNhcm91c2VsQXV0b1J1biwgbW92ZVNsaWRlLCBkb3RNb3ZlLCB1bml2ZXJzYWxPYnNlcnZlciwgdGFiTmF2U3R5bGUgfSBmcm9tIFwiLi4vc2NyaXB0cy90ZW1wbGF0ZVwiO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICB0YWJOYXZTdHlsZSgpO1xuICAgIGNhcm91c2VsU3RhcnQoMSk7XG4gICAgc2V0SW50ZXJ2YWwoY2Fyb3VzZWxBdXRvUnVuLCA3MDAwKTtcbiAgICBbJy5pbnRyby1vd25lcnMnLCAnLmludHJvLXN0YWZmJ10uZm9yRWFjaCgocGFyZW50Q2xhc3MpID0+IHtcbiAgICAgICAgdW5pdmVyc2FsT2JzZXJ2ZXIocGFyZW50Q2xhc3MsIDAuMywgcGFyZW50Q2xhc3MsICdoaWRkZW4nLCAnc2hvdycpXG4gICAgfSk7XG5cbiAgICBbJy5pbnRyby1jaGVmcyAuaGVhZGVyJywgJy5pbnRyby1jaGVmcyAuZGVzYyddLmZvckVhY2goKHBhcmVudENsYXNzKSA9PiB7XG4gICAgICAgIHVuaXZlcnNhbE9ic2VydmVyKHBhcmVudENsYXNzLCAwLjMsIHBhcmVudENsYXNzLCAnZmFkZU91dCcsICdmYWRlSW4nKVxuICAgIH0pO1xuICAgIFsnLmNoZWYtMSAuaW1hZ2UnXS5mb3JFYWNoKChwYXJlbnRDbGFzcykgPT4ge1xuICAgICAgICB1bml2ZXJzYWxPYnNlcnZlcihwYXJlbnRDbGFzcywgMC41LCBwYXJlbnRDbGFzcywgJ2ZhZGVGcm9tTGVmdCcsICdmYWRlVG9SaWdodCcpXG4gICAgfSk7XG4gICAgWycuY2hlZi0yIC5pbWFnZSddLmZvckVhY2goKHBhcmVudENsYXNzKSA9PiB7XG4gICAgICAgIHVuaXZlcnNhbE9ic2VydmVyKHBhcmVudENsYXNzLCAwLjUsIHBhcmVudENsYXNzLCAnZmFkZUZyb21SaWdodCcsICdmYWRlVG9MZWZ0JylcbiAgICB9KTtcbn0pO1xuXG53aW5kb3cub25zY3JvbGwgPSBuYXZTY3JvbGw7XG5cbmRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4gey8qIFVzZSBldmVudCBkZWxlZ2F0aW9uICovXG4gICAgY29uc3Qgc2lkZU5hdkNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhci5tZW51Jyk7XG5cbiAgICBpZiAoZS50YXJnZXQubWF0Y2hlcygnLnNpZGViYXIuc3ltYm9sJykgfHwgZS50YXJnZXQubWF0Y2hlcygnLm1lbnUtaWNvbicpIHx8IGUudGFyZ2V0Lm1hdGNoZXMoJy5tZW51LXRleHQnKSkge1xuICAgICAgICBjbGlja09wZW4oc2lkZU5hdkNvbnRlbnQpO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXQubWF0Y2hlcygnLmNsb3NlQnRuJykpIHtcbiAgICAgICAgY2xpY2tDbG9zZShzaWRlTmF2Q29udGVudCk7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKCcucHJldicpKSB7XG4gICAgICAgIG1vdmVTbGlkZSgtMSk7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKCcubmV4dCcpKSB7XG4gICAgICAgIG1vdmVTbGlkZSgxKTtcbiAgICB9XG4gICAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoJy5kb3QnKSkge1xuICAgICAgICBkb3RNb3ZlKGUudGFyZ2V0KTtcbiAgICB9XG59KTtcblxuY29uc3QgcHJlTG9hZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcmUtbG9hZGVyJylcbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgcHJlTG9hZC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xufSJdLCJuYW1lcyI6WyJjYXJvdXNlbFN0YXJ0IiwidGFyZ2V0IiwiZG90cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInNsaWRlcyIsImZvckVhY2giLCJkb3QiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJzbGlkZSIsInN0eWxlIiwiZGlzcGxheSIsImFkZCIsImNhcm91c2VsQXV0b1J1biIsImkiLCJsZW5ndGgiLCJtb3ZlU2xpZGUiLCJpbmRleCIsInVuaXZlcnNhbE9ic2VydmVyIiwiZ3JvdXBDbGFzcyIsInRob2xkIiwidGFyZ2V0RWxDbGFzcyIsImN1cnJBdHQiLCJuZXdBdHQiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJ0YXJnZXRFbCIsInJlcGxhY2UiLCJ0aHJlc2hvbGQiLCJvYnNlcnZlIiwiU2V0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1cnJlbnROYXYiLCJjdXJyZW50Q29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpZCIsInRhYk5hdlN0eWxlIiwic2V0SW50ZXJ2YWwiLCJwYXJlbnRDbGFzcyIsIm9uc2Nyb2xsIiwic3RpY2t5IiwiYm9keSIsInNjcm9sbFRvcCIsImRvY3VtZW50RWxlbWVudCIsInRvcCIsImUiLCJzaWRlTmF2Q29udGVudCIsIm1hdGNoZXMiLCJ0cmFuc2Zvcm0iLCJBcnJheSIsImZyb20iLCJmaW5kSW5kZXgiLCJhIiwiY29udGFpbnMiLCJkb3RNb3ZlIiwicHJlTG9hZCIsIm9ubG9hZCJdLCJzb3VyY2VSb290IjoiIn0=