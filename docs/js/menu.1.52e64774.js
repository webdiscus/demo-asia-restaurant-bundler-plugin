(()=>{"use strict";const e=(e,t,n)=>{const o=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting)for(let e=0;e<n.length;e+=1)document.querySelector(n[0]).style.opacity="1",document.querySelector(n[1]).style.opacity="0",document.querySelector(n[2]).style.opacity="0"}))}),{threshold:t});document.querySelectorAll(e).forEach((e=>o.observe(e)))},t=(e,t,n,o,r)=>{const s=new IntersectionObserver(((e,t)=>{e.forEach((e=>{e.isIntersecting&&document.querySelectorAll(n).forEach((e=>{e.classList.replace(o,r)}))}))}),{threshold:t});document.querySelectorAll(e).forEach((e=>s.observe(e)))},n={intervals:new Set,makeInterval(...e){const t=setInterval(...e);return this.intervals.add(t),t},makeTimeout(...e){const t=setTimeout(...e);return this.intervals.add(t),t},clear(e){return this.intervals.delete(e),clearInterval(e)},clearAll(){this.intervals.clear()}};window.addEventListener("DOMContentLoaded",(()=>{(()=>{const e=document.querySelectorAll(".left-content a"),t=document.querySelector(".content");for(let n=0;n<e.length;n+=1)e[n].id===t.classList[1]&&e[n].classList.replace("nav-inactive","nav-active")})();const o=Array.from(document.querySelectorAll(".menuPics"));n.makeTimeout((()=>{o[1].style.display="block"}),1e4),n.makeInterval((()=>(e=>{const t=Array.from(document.querySelectorAll(".menuPics")),o=[];n.intervals.forEach((e=>{[...n.intervals].indexOf(e)>=2&&n.intervals.delete(e)})),t.forEach((e=>{e.classList.contains("slide-active")&&(o.splice(0,o.length),o.push(e))}));const r=document.getElementById(o[0].id);let s,l;const c=()=>{s.style.zIndex="10",s.style.display="block",l.style.zIndex="9",l.style.display="block"};Number(o[0].id)<t.length-1?(s=document.getElementById((Number(o[0].id)+1).toString()),Number(s.id)<t.length-1?l=document.getElementById(Number(s.id)+1):Number(s.id)>=t.length-1&&(l=document.getElementById("0")),s.classList.add("slide-active"),n.makeTimeout(c,5e3)):Number(o[0].id)>=t.length-1&&(s=document.getElementById("0"),Number(s.id)<t.length-1?(l=document.getElementById(Number(s.id)+1),l.style.zIndex="9"):Number(s.id)>=t.length-1&&(l=document.getElementById("0"),l.style.zIndex="9"),s.classList.add("slide-active"),n.makeTimeout(c,5e3)),n.makeTimeout((()=>{r.classList.remove("slide-active")}),5e3);for(let e=0;e<t.length;e+=1)if(t[e]!==s&&t[e]!==l){const o=()=>{t[e].style.zIndex="8",t[e].style.display="none"};n.makeTimeout(o,5e3)}})()),1e4),e(".breakfast",.01,[".bg-bf",".bg-lch",".bg-dnr"]),e(".breakfast-menu",.01,[".bg-bf",".bg-lch",".bg-dnr"]),e(".lunch",.5,[".bg-lch",".bg-bf",".bg-dnr"]),e(".lunch-menu",.5,[".bg-lch",".bg-bf",".bg-dnr"]),e(".dinner",.5,[".bg-dnr",".bg-bf",".bg-lch"]),e(".dnr-container",.3,[".bg-dnr",".bg-bf",".bg-lch"]),["#header-breakfast",".special-dish"].forEach((e=>{t(e,.3,e,"hidden","show")})),[".quote-text",".breakfast-menu.normal .food-container.first",".breakfast-menu.normal .food-container.second",".breakfast-menu.offset .food-img.first",".breakfast-menu.offset .food-img.second",".dnr-desc-left"].forEach((e=>{t(e,.3,e,"fadeFromLeft","fadeToRight")})),[".quote p:nth-of-type(1)",".breakfast-menu.normal .food-img.first",".breakfast-menu.normal .food-img.second",".breakfast-menu.offset .food-container.first",".breakfast-menu.offset .food-container.second",".dnr-desc-right .dnr-desc",".rgt-dnr-2"].forEach((e=>{t(e,.3,e,"fadeFromRight","fadeToLeft")})),[".lch-food-img",".lft-dnr",".rgt-dnr-1"].forEach((e=>{t(e,.3,e,"up","down")})),[".lunch .food-container",".dnr-desc-btm .dnr-desc",".btm-dnr"].forEach((e=>{t(e,.1,e,"fadeOut","fadeIn")}))})),window.onscroll=()=>{const e=document.querySelector(".sticky-navbar");document.body.scrollTop>25||document.documentElement.scrollTop>25?e.style.top="0":e.style.top="-180px"},document.body.addEventListener("click",(e=>{const t=document.querySelector(".sidebar.menu");(e.target.matches(".sidebar.symbol")||e.target.matches(".menu-icon")||e.target.matches(".menu-text"))&&(t.style.transform="translate3d(0, 0, 0)"),e.target.matches(".closeBtn")&&(t.style.transform="translate3d(-450px, 0, 0)")}));const o=document.querySelector("#pre-loader");window.onload=()=>{o.style.display="none"}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,